// <auto-generated />
using System;
using FacilityMonitoring.Infrastructure.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FacilityMonitoring.Infrastructure.Migrations
{
    [DbContext(typeof(FacilityContext))]
    partial class FacilityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChannelFacilityZone", b =>
                {
                    b.Property<int>("ChannelsId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("ChannelsId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("ChannelZones", (string)null);
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Bypass")
                        .HasColumnType("bit");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FacilityActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityActionId");

                    b.ToTable("Alerts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Alert");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<int>("ModbusDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("SystemChannel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModbusDeviceId");

                    b.ToTable("Channels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Channel");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FacilityActions");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneParentId");

                    b.ToTable("FacilityZones");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("BypassAlarms")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<double>("ReadInterval")
                        .HasColumnType("float");

                    b.Property<double>("SaveInterval")
                        .HasColumnType("float");

                    b.Property<int>("SlaveAddress")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModbusDevices");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ModbusDevice");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChannelCount")
                        .HasColumnType("int");

                    b.Property<int>("ModuleChannel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<double>("Slope")
                        .HasColumnType("float");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ZeroValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("FacilityZoneModbusDevice", b =>
                {
                    b.Property<int>("ModbusDevicesId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("ModbusDevicesId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("DeviceZones", (string)null);
                });

            modelBuilder.Entity("ModuleMonitoringBox", b =>
                {
                    b.Property<int>("ModulesId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringBoxesId")
                        .HasColumnType("int");

                    b.HasKey("ModulesId", "MonitoringBoxesId");

                    b.HasIndex("MonitoringBoxesId");

                    b.ToTable("BoxModules", (string)null);
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.AnalogAlert", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.Alert");

                    b.Property<double>("SetPoint")
                        .HasColumnType("float");

                    b.HasIndex("ChannelId");

                    b.HasDiscriminator().HasValue("AnalogAlert");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.AnalogInput", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.Channel");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasIndex("SensorId");

                    b.HasDiscriminator().HasValue("AnalogInput");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.DiscreteAlert", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.Alert");

                    b.Property<int>("TriggerOn")
                        .HasColumnType("int");

                    b.HasIndex("ChannelId")
                        .IsUnique()
                        .HasDatabaseName("IX_Alerts_ChannelId1");

                    b.HasDiscriminator().HasValue("DiscreteAlert");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.DiscreteInput", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.Channel");

                    b.HasDiscriminator().HasValue("DiscreteInput");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.DiscreteOutput", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.Channel");

                    b.Property<int>("ChannelState")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DiscreteOutput");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.MonitoringBox", b =>
                {
                    b.HasBaseType("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice");

                    b.HasDiscriminator().HasValue("MonitoringBox");
                });

            modelBuilder.Entity("ChannelFacilityZone", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Alert", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.FacilityAction", "FacilityAction")
                        .WithMany("Alerts")
                        .HasForeignKey("FacilityActionId")
                        .IsRequired();

                    b.Navigation("FacilityAction");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Channel", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice", "ModbusDevice")
                        .WithMany("Channels")
                        .HasForeignKey("ModbusDeviceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("FacilityMonitoring.Infrastructure.Data.Model.ChannelAddress", "ChannelAddress", b1 =>
                        {
                            b1.Property<int>("ChannelId")
                                .HasColumnType("int");

                            b1.Property<int>("Channel")
                                .HasColumnType("int");

                            b1.Property<int>("ModbusSlot")
                                .HasColumnType("int");

                            b1.HasKey("ChannelId");

                            b1.ToTable("Channels");

                            b1.WithOwner()
                                .HasForeignKey("ChannelId");
                        });

                    b.OwnsOne("FacilityMonitoring.Infrastructure.Data.Model.ModbusAddress", "ModbusAddress", b1 =>
                        {
                            b1.Property<int>("ChannelId")
                                .HasColumnType("int");

                            b1.Property<int>("Address")
                                .HasColumnType("int");

                            b1.Property<int>("RegisterLength")
                                .HasColumnType("int");

                            b1.HasKey("ChannelId");

                            b1.ToTable("Channels");

                            b1.WithOwner()
                                .HasForeignKey("ChannelId");
                        });

                    b.Navigation("ChannelAddress");

                    b.Navigation("ModbusAddress");

                    b.Navigation("ModbusDevice");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityAction", b =>
                {
                    b.OwnsMany("FacilityMonitoring.Infrastructure.Data.Model.ActionOutput", "ActionOutputs", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("OffLevel")
                                .HasColumnType("int");

                            b1.Property<int>("OnLevel")
                                .HasColumnType("int");

                            b1.Property<int?>("OutputId")
                                .HasColumnType("int");

                            b1.Property<int>("OwnerId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("OutputId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ActionOutput");

                            b1.HasOne("FacilityMonitoring.Infrastructure.Data.Model.DiscreteOutput", "Output")
                                .WithMany()
                                .HasForeignKey("OutputId");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");

                            b1.Navigation("Output");
                        });

                    b.Navigation("ActionOutputs");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", "ZoneParent")
                        .WithMany("SubZones")
                        .HasForeignKey("ZoneParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("FacilityMonitoring.Infrastructure.Data.Model.Location", "Location", b1 =>
                        {
                            b1.Property<int>("FacilityZoneId")
                                .HasColumnType("int");

                            b1.Property<double>("XCoord")
                                .HasColumnType("float");

                            b1.Property<double>("YCoord")
                                .HasColumnType("float");

                            b1.HasKey("FacilityZoneId");

                            b1.ToTable("FacilityZones");

                            b1.WithOwner()
                                .HasForeignKey("FacilityZoneId");
                        });

                    b.OwnsOne("FacilityMonitoring.Infrastructure.Data.Model.ZoneSize", "ZoneSize", b1 =>
                        {
                            b1.Property<int>("FacilityZoneId")
                                .HasColumnType("int");

                            b1.Property<double>("Height")
                                .HasColumnType("float");

                            b1.Property<double>("Width")
                                .HasColumnType("float");

                            b1.HasKey("FacilityZoneId");

                            b1.ToTable("FacilityZones");

                            b1.WithOwner()
                                .HasForeignKey("FacilityZoneId");
                        });

                    b.Navigation("Location");

                    b.Navigation("ZoneParent");

                    b.Navigation("ZoneSize");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice", b =>
                {
                    b.OwnsOne("FacilityMonitoring.Infrastructure.Data.Model.NetworkConfiguration", "NetworkConfiguration", b1 =>
                        {
                            b1.Property<int>("ModbusDeviceId")
                                .HasColumnType("int");

                            b1.Property<string>("DNS")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Gateway")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("IPAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MAC")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Port")
                                .HasColumnType("int");

                            b1.Property<int>("SlaveAddress")
                                .HasColumnType("int");

                            b1.HasKey("ModbusDeviceId");

                            b1.ToTable("ModbusDevices");

                            b1.WithOwner()
                                .HasForeignKey("ModbusDeviceId");
                        });

                    b.Navigation("NetworkConfiguration");
                });

            modelBuilder.Entity("FacilityZoneModbusDevice", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice", null)
                        .WithMany()
                        .HasForeignKey("ModbusDevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleMonitoringBox", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.MonitoringBox", null)
                        .WithMany()
                        .HasForeignKey("MonitoringBoxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.AnalogAlert", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.AnalogInput", "Channel")
                        .WithMany("AnalogAlerts")
                        .HasForeignKey("ChannelId");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.AnalogInput", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.Sensor", "Sensor")
                        .WithMany("AnalogInputs")
                        .HasForeignKey("SensorId");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.DiscreteAlert", b =>
                {
                    b.HasOne("FacilityMonitoring.Infrastructure.Data.Model.DiscreteInput", "Channel")
                        .WithOne("DiscreteAlert")
                        .HasForeignKey("FacilityMonitoring.Infrastructure.Data.Model.DiscreteAlert", "ChannelId")
                        .HasConstraintName("FK_Alerts_Channels_ChannelId1");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityAction", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.FacilityZone", b =>
                {
                    b.Navigation("SubZones");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.ModbusDevice", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.Sensor", b =>
                {
                    b.Navigation("AnalogInputs");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.AnalogInput", b =>
                {
                    b.Navigation("AnalogAlerts");
                });

            modelBuilder.Entity("FacilityMonitoring.Infrastructure.Data.Model.DiscreteInput", b =>
                {
                    b.Navigation("DiscreteAlert");
                });
#pragma warning restore 612, 618
        }
    }
}
